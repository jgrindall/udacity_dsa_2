# Test basic
>>> from problem_5 import Blockchain
>>> b = Blockchain()
>>> b.add("Some data")
>>> str(b.root.data)
'Some data'



# Test unicode
>>> from problem_5 import Blockchain
>>> b = Blockchain()
>>> b.add("Some data\nwith\tunicode☺")
>>> str(b.root.data)
'Some data\nwith\tunicode☺'



# Test large number
>>> from problem_5 import Blockchain
>>> b = Blockchain()
>>> for i in range(500):
...   b.add("data " + str(i))
>>> print(str(b.root.data))
data 0



# Test setting next
>>> from problem_5 import Blockchain
>>> b = Blockchain()
>>> for i in range(5):
...   b.add("data " + str(i))
>>> print(str(b.root.data))
data 0
>>> try:
...   b.root.next = None
... except RuntimeError as e:
...   print(e)
can't reset the next attribute.




# Test setting hash
>>> from problem_5 import Blockchain
>>> b = Blockchain()
>>> for i in range(5):
...   b.add("data " + str(i))
>>> print(str(b.root.data))
data 0
>>> try:
...   b.root.hash = "123"
... except RuntimeError as e:
...   print(e)
can't reset the hash attribute.





# test hashes are correct
>>> from problem_5 import Blockchain
>>> b = Blockchain()
>>> for i in range(5):
...   b.add("data " + str(i))
>>> b.root.next.previous_hash == b.root.hash
True
>>> b.root.next.next.previous_hash == b.root.next.hash
True
>>> b.root.next.next.next.previous_hash == b.root.next.next.hash
True
















